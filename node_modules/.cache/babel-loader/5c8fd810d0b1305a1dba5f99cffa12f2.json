{"ast":null,"code":"var _jsxFileName = \"/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js\";\nimport React from 'react';\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Solver extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      fetch(`http://127.0.0.1:5000/solve`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          grid: this.state.grid\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(data => this.setState({\n        grid: data\n      }));\n    };\n\n    this.handleCellChange = (r, c) => e => {\n      var newgrid = this.state.grid;\n      console.log(newgrid); // if(e.target.value)\n\n      newgrid[r][c] = parseInt(e.target.value); // else\n      //     newgrid[r][c] = 0\n\n      this.setState({\n        grid: newgrid\n      });\n    };\n\n    this.state = {\n      grid: [[0, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 0, 7, 3, 0, 0, 9], [3, 0, 9, 0, 0, 0, 0, 4, 5], [4, 9, 0, 0, 0, 0, 0, 0, 0], [8, 0, 3, 0, 5, 0, 9, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 6], [9, 6, 0, 0, 0, 0, 3, 0, 8], [7, 0, 0, 6, 8, 0, 0, 0, 0], [0, 2, 8, 0, 0, 0, 0, 0, 0]]\n    };\n    this.handleCellChange = this.handleCellChange.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(SolverContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Sudoku Solver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: this.state.grid.map((row, r) => row.map((num, c) => /*#__PURE__*/_jsxDEV(Cell, {\n          id: `${r * this.state.grid.length + c}`,\n          type: \"text\",\n          value: this.state.grid[r][c].toString(),\n          onChange: this.handleCellChange(r, c)\n        }, r * this.state.grid.length + c, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SolveBtn, {\n        onClick: this.solve,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Solver;","map":{"version":3,"sources":["/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js"],"names":["React","SolverContainer","Title","Grid","Cell","SolveBtn","Solver","Component","constructor","props","solve","fetch","method","headers","body","JSON","stringify","grid","state","then","response","ok","json","data","setState","handleCellChange","r","c","e","newgrid","console","log","parseInt","target","value","bind","render","map","row","num","length","toString"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements'\n\nclass Solver extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {grid: [\n            [0, 0, 0, 0, 0, 0, 6, 8, 0],\n            [0, 0, 0, 0, 7, 3, 0, 0, 9],\n            [3, 0, 9, 0, 0, 0, 0, 4, 5],\n            [4, 9, 0, 0, 0, 0, 0, 0, 0],\n            [8, 0, 3, 0, 5, 0, 9, 0, 2],\n            [0, 0, 0, 0, 0, 0, 0, 3, 6],\n            [9, 6, 0, 0, 0, 0, 3, 0, 8],\n            [7, 0, 0, 6, 8, 0, 0, 0, 0],\n            [0, 2, 8, 0, 0, 0, 0, 0, 0]\n        ]};\n        this.handleCellChange = this.handleCellChange.bind(this);\n      }\n    \n    solve = () => {\n        fetch(`http://127.0.0.1:5000/solve`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({grid: this.state.grid})\n        }).then(response => {\n            if(response.ok){\n                return response.json()\n            }\n        }).then(data => this.setState({grid: data}))\n    }\n\n    handleCellChange = (r,c) => (e) => {\n        var newgrid = this.state.grid;\n        console.log(newgrid)\n        // if(e.target.value)\n            newgrid[r][c] = parseInt(e.target.value)\n        // else\n        //     newgrid[r][c] = 0\n        this.setState({grid: newgrid})\n    }\n\n    render() {\n        return (\n            <SolverContainer>\n                <Title>Sudoku Solver</Title>\n                <Grid>\n                    {this.state.grid.map((row, r) => (\n                        row.map((num, c) => (\n                            <Cell id={`${(r*this.state.grid.length)+c}`} type=\"text\" value={this.state.grid[r][c].toString()} key={(r*this.state.grid.length)+c} onChange={this.handleCellChange(r,c)}/>\n                        ))\n                    ))}\n                </Grid>\n                <SolveBtn onClick={this.solve}>Solve</SolveBtn>\n            </SolverContainer>\n        )\n    }\n}\n\nexport default Solver\n"]},"metadata":{},"sourceType":"module"}