{"ast":null,"code":"var _jsxFileName = \"/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js\";\nimport React, { useState } from 'react';\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements'; // const Solver = () => {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Solver extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCellChange = (r, c) => e => {\n      // console.log(e.target.value)\n      // document.getElementById(`${(r*grid.length)+c}`).value = \"\"\n      var newgrid = this.state.grid;\n      console.log(newgrid);\n      if (e.target.value) newgrid[r][c] = parseInt(e.target.value);else newgrid[r][c] = 0; // setGrid(newgrid);\n\n      this.setState({\n        grid: newgrid\n      }); // console.log(grid)\n      // forceUpdate\n    };\n\n    this.state = {\n      grid: [[0, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 0, 7, 3, 0, 0, 9], [3, 0, 9, 0, 0, 0, 0, 4, 5], [4, 9, 0, 0, 0, 0, 0, 0, 0], [8, 0, 3, 0, 5, 0, 9, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 6], [9, 6, 0, 0, 0, 0, 3, 0, 8], [7, 0, 0, 6, 8, 0, 0, 0, 0], [0, 2, 8, 0, 0, 0, 0, 0, 0]]\n    };\n    this.handleCellChange = this.handleCellChange.bind(this);\n  } // const [grid, setGrid] = useState([\n  //     [0, 0, 0, 0, 0, 0, 6, 8, 0],\n  //     [0, 0, 0, 0, 7, 3, 0, 0, 9],\n  //     [3, 0, 9, 0, 0, 0, 0, 4, 5],\n  //     [4, 9, 0, 0, 0, 0, 0, 0, 0],\n  //     [8, 0, 3, 0, 5, 0, 9, 0, 2],\n  //     [0, 0, 0, 0, 0, 0, 0, 3, 6],\n  //     [9, 6, 0, 0, 0, 0, 3, 0, 8],\n  //     [7, 0, 0, 6, 8, 0, 0, 0, 0],\n  //     [0, 2, 8, 0, 0, 0, 0, 0, 0]\n  // ])\n  // useEffect(()=> {\n  //     fetch(`http://127.0.0.1:5000/getGrid`)\n  //     .then(response => response.json())\n  //     .then(data => setGrid(data))\n  // }, [])\n  // solve = () => {\n  //     fetch(`http://127.0.0.1:5000/solve`, {\n  //         method: 'POST',\n  //         headers: {\n  //             'Accept': 'application/json',\n  //             'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify({grid: grid})\n  //     }).then(response => {\n  //         if(response.ok){\n  //             return response.json()\n  //         }\n  //     }).then(data => setGrid(data))\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(SolverContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Sudoku Solver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: this.state.grid.map((row, r) => row.map((num, c) => /*#__PURE__*/_jsxDEV(Cell, {\n          id: `${r * this.state.grid.length + c}`,\n          type: \"text\",\n          value: this.state.grid[r][c].toString(),\n          onChange: this.handleCellChange(r, c)\n        }, r * this.state.grid.length + c, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Solver;","map":{"version":3,"sources":["/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js"],"names":["React","useState","SolverContainer","Title","Grid","Cell","SolveBtn","Solver","Component","constructor","props","handleCellChange","r","c","e","newgrid","state","grid","console","log","target","value","parseInt","setState","bind","render","map","row","num","length","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements'\n\n// const Solver = () => {\nclass Solver extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {grid: [\n            [0, 0, 0, 0, 0, 0, 6, 8, 0],\n            [0, 0, 0, 0, 7, 3, 0, 0, 9],\n            [3, 0, 9, 0, 0, 0, 0, 4, 5],\n            [4, 9, 0, 0, 0, 0, 0, 0, 0],\n            [8, 0, 3, 0, 5, 0, 9, 0, 2],\n            [0, 0, 0, 0, 0, 0, 0, 3, 6],\n            [9, 6, 0, 0, 0, 0, 3, 0, 8],\n            [7, 0, 0, 6, 8, 0, 0, 0, 0],\n            [0, 2, 8, 0, 0, 0, 0, 0, 0]\n        ]};\n        this.handleCellChange = this.handleCellChange.bind(this);\n      }\n\n    // const [grid, setGrid] = useState([\n    //     [0, 0, 0, 0, 0, 0, 6, 8, 0],\n    //     [0, 0, 0, 0, 7, 3, 0, 0, 9],\n    //     [3, 0, 9, 0, 0, 0, 0, 4, 5],\n    //     [4, 9, 0, 0, 0, 0, 0, 0, 0],\n    //     [8, 0, 3, 0, 5, 0, 9, 0, 2],\n    //     [0, 0, 0, 0, 0, 0, 0, 3, 6],\n    //     [9, 6, 0, 0, 0, 0, 3, 0, 8],\n    //     [7, 0, 0, 6, 8, 0, 0, 0, 0],\n    //     [0, 2, 8, 0, 0, 0, 0, 0, 0]\n    // ])\n\n    // useEffect(()=> {\n    //     fetch(`http://127.0.0.1:5000/getGrid`)\n    //     .then(response => response.json())\n    //     .then(data => setGrid(data))\n    // }, [])\n    \n    // solve = () => {\n    //     fetch(`http://127.0.0.1:5000/solve`, {\n    //         method: 'POST',\n    //         headers: {\n    //             'Accept': 'application/json',\n    //             'Content-Type': 'application/json'\n    //         },\n    //         body: JSON.stringify({grid: grid})\n    //     }).then(response => {\n    //         if(response.ok){\n    //             return response.json()\n    //         }\n    //     }).then(data => setGrid(data))\n    // }\n\n    handleCellChange = (r,c) => (e) => {\n        // console.log(e.target.value)\n        // document.getElementById(`${(r*grid.length)+c}`).value = \"\"\n        var newgrid = this.state.grid;\n        console.log(newgrid)\n        if(e.target.value)\n            newgrid[r][c] = parseInt(e.target.value)\n        else\n            newgrid[r][c] = 0\n        // setGrid(newgrid);\n        this.setState({grid: newgrid})\n        // console.log(grid)\n        // forceUpdate\n    }\n\n    render() {\n        return (\n            <SolverContainer>\n                <Title>Sudoku Solver</Title>\n                <Grid>\n                    {this.state.grid.map((row, r) => (\n                        row.map((num, c) => (\n                            <Cell id={`${(r*this.state.grid.length)+c}`} type=\"text\" value={this.state.grid[r][c].toString()} key={(r*this.state.grid.length)+c} onChange={this.handleCellChange(r,c)}/>\n                        ))\n                    ))}\n                </Grid>\n                {/* <SolveBtn onClick={solve}>Solve</SolveBtn> */}\n            </SolverContainer>\n        )\n    }\n}\n\nexport default Solver\n"]},"metadata":{},"sourceType":"module"}