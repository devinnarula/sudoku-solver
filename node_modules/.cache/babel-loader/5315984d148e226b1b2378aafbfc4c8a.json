{"ast":null,"code":"var _jsxFileName = \"/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { SolverContainer, Title, Grid, Cell } from './SolverElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Solver = () => {\n  _s();\n\n  const [grid, setGrid] = useState([[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]);\n  useEffect(() => {\n    fetch(`http://127.0.0.1:5000/getGrid/`).then(response => response.json()).then(data => setGrid(data));\n  });\n  return /*#__PURE__*/_jsxDEV(SolverContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: grid.map(row => row.map(num => /*#__PURE__*/_jsxDEV(Cell, {\n        value: num\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Solver, \"Cd36qFpdcM7QEaOhBL4W6Q9pV3I=\");\n\n_c = Solver;\nexport default Solver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Solver\");","map":{"version":3,"sources":["/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js"],"names":["React","useEffect","useState","SolverContainer","Title","Grid","Cell","Solver","grid","setGrid","fetch","then","response","json","data","map","row","num"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,eAAT,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,IAAvC,QAAmD,kBAAnD;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,CAC7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAD6B,EAE7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAF6B,EAG7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAH6B,EAI7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAJ6B,EAK7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAL6B,EAM7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAN6B,EAO7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAP6B,EAQ7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAR6B,EAS7B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAT6B,CAAD,CAAhC;AAYAD,EAAAA,SAAS,CAAC,MAAK;AACXS,IAAAA,KAAK,CAAE,gCAAF,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIL,OAAO,CAACK,IAAD,CAFrB;AAGH,GAJQ,CAAT;AAMA,sBACI,QAAC,eAAD;AAAA,4BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAA,gBACKN,IAAI,CAACO,GAAL,CAAUC,GAAD,IACNA,GAAG,CAACD,GAAJ,CAASE,GAAD,iBACJ,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEA;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,CADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAhCD;;GAAMV,M;;KAAAA,M;AAkCN,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { SolverContainer, Title, Grid, Cell } from './SolverElements'\n\nconst Solver = () => {\n    const [grid, setGrid] = useState([\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\n    ])\n\n    useEffect(()=> {\n        fetch(`http://127.0.0.1:5000/getGrid/`)\n        .then(response => response.json())\n        .then(data => setGrid(data))\n    })\n\n    return (\n        <SolverContainer>\n            <Title>Sudoku Solver</Title>\n            <Grid>\n                {grid.map((row) => (\n                    row.map((num) => (\n                        <Cell value={num}/>\n                    ))\n                ))}\n            </Grid>\n            {/* <SolveBtn>Solve</SolveBtn> */}\n        </SolverContainer>\n    )\n}\n\nexport default Solver\n"]},"metadata":{},"sourceType":"module"}