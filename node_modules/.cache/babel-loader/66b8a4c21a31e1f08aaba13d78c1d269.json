{"ast":null,"code":"var _jsxFileName = \"/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { SolverContainer, Title, Grid, Cell } from './SolverElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Solver = () => {\n  _s();\n\n  let board = [[0, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 0, 7, 3, 0, 0, 9], [3, 0, 9, 0, 0, 0, 0, 4, 5], [4, 9, 0, 0, 0, 0, 0, 0, 0], [8, 0, 3, 0, 5, 0, 9, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 6], [9, 6, 0, 0, 0, 0, 3, 0, 8], [7, 0, 0, 6, 8, 0, 0, 0, 0], [0, 2, 8, 0, 0, 0, 0, 0, 0]];\n  useEffect(() => {\n    fetch(`https://todolistflasktutorial.herokuapp.com/getGrid/`).then(response => response.json()).then(data => setTodo(data));\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(SolverContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: board.map(row => row.map(num => /*#__PURE__*/_jsxDEV(Cell, {\n        value: num\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Solver, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Solver;\nexport default Solver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Solver\");","map":{"version":3,"sources":["/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js"],"names":["React","useEffect","SolverContainer","Title","Grid","Cell","Solver","board","fetch","then","response","json","data","setTodo","id","map","row","num"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,eAAT,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuCC,IAAvC,QAAmD,kBAAnD;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACjB,MAAIC,KAAK,GAAG,CACR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CADQ,EAER,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAFQ,EAGR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAHQ,EAIR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAJQ,EAKR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CALQ,EAMR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CANQ,EAOR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAPQ,EAQR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CARQ,EASR,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CATQ,CAAZ;AAYAN,EAAAA,SAAS,CAAC,MAAK;AACXO,IAAAA,KAAK,CAAE,sDAAF,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIC,OAAO,CAACD,IAAD,CAFrB;AAGH,GAJQ,EAIN,CAACE,EAAD,CAJM,CAAT;AAMA,sBACI,QAAC,eAAD;AAAA,4BACI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAA,gBACKP,KAAK,CAACQ,GAAN,CAAWC,GAAD,IACPA,GAAG,CAACD,GAAJ,CAASE,GAAD,iBACJ,QAAC,IAAD;AAAM,QAAA,KAAK,EAAEA;AAAb;AAAA;AAAA;AAAA;AAAA,cADJ,CADH;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAhCD;;GAAMX,M;;KAAAA,M;AAkCN,eAAeA,MAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { SolverContainer, Title, Grid, Cell } from './SolverElements'\n\nconst Solver = () => {\n    let board = [\n        [0, 0, 0, 0, 0, 0, 6, 8, 0],\n        [0, 0, 0, 0, 7, 3, 0, 0, 9],\n        [3, 0, 9, 0, 0, 0, 0, 4, 5],\n        [4, 9, 0, 0, 0, 0, 0, 0, 0],\n        [8, 0, 3, 0, 5, 0, 9, 0, 2],\n        [0, 0, 0, 0, 0, 0, 0, 3, 6],\n        [9, 6, 0, 0, 0, 0, 3, 0, 8],\n        [7, 0, 0, 6, 8, 0, 0, 0, 0],\n        [0, 2, 8, 0, 0, 0, 0, 0, 0]\n    ]\n\n    useEffect(()=> {\n        fetch(`https://todolistflasktutorial.herokuapp.com/getGrid/`)\n        .then(response => response.json())\n        .then(data => setTodo(data))\n    }, [id])\n\n    return (\n        <SolverContainer>\n            <Title>Sudoku Solver</Title>\n            <Grid>\n                {board.map((row) => (\n                    row.map((num) => (\n                        <Cell value={num}/>\n                    ))\n                ))}\n            </Grid>\n            {/* <SolveBtn>Solve</SolveBtn> */}\n        </SolverContainer>\n    )\n}\n\nexport default Solver\n"]},"metadata":{},"sourceType":"module"}