{"ast":null,"code":"var _jsxFileName = \"/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js\";\nimport React, { useState } from 'react';\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements'; // const Solver = () => {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Solver extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      fetch(`http://127.0.0.1:5000/solve`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          grid: grid\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(data => setGrid(data));\n    };\n\n    this.handleCellChange = (r, c) => e => {\n      // console.log(e.target.value)\n      document.getElementById(`${r * grid.length + c}`).value = \"\";\n      var newgrid = grid;\n      console.log(newgrid);\n      if (e.target.value) newgrid[r][c] = parseInt(e.target.value);else newgrid[r][c] = 0;\n      setGrid(newgrid);\n      console.log(grid); // forceUpdate\n    };\n\n    this.state = {\n      grid: [[0, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 0, 7, 3, 0, 0, 9], [3, 0, 9, 0, 0, 0, 0, 4, 5], [4, 9, 0, 0, 0, 0, 0, 0, 0], [8, 0, 3, 0, 5, 0, 9, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 6], [9, 6, 0, 0, 0, 0, 3, 0, 8], [7, 0, 0, 6, 8, 0, 0, 0, 0], [0, 2, 8, 0, 0, 0, 0, 0, 0]]\n    };\n    this.handleCellChange = this.handleCellChange.bind(this);\n  } // const [grid, setGrid] = useState([\n  //     [0, 0, 0, 0, 0, 0, 6, 8, 0],\n  //     [0, 0, 0, 0, 7, 3, 0, 0, 9],\n  //     [3, 0, 9, 0, 0, 0, 0, 4, 5],\n  //     [4, 9, 0, 0, 0, 0, 0, 0, 0],\n  //     [8, 0, 3, 0, 5, 0, 9, 0, 2],\n  //     [0, 0, 0, 0, 0, 0, 0, 3, 6],\n  //     [9, 6, 0, 0, 0, 0, 3, 0, 8],\n  //     [7, 0, 0, 6, 8, 0, 0, 0, 0],\n  //     [0, 2, 8, 0, 0, 0, 0, 0, 0]\n  // ])\n  // useEffect(()=> {\n  //     fetch(`http://127.0.0.1:5000/getGrid`)\n  //     .then(response => response.json())\n  //     .then(data => setGrid(data))\n  // }, [])\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(SolverContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Sudoku Solver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        children: grid.map((row, r) => row.map((num, c) => /*#__PURE__*/_jsxDEV(Cell, {\n          id: `${r * grid.length + c}`,\n          type: \"text\",\n          value: grid[r][c].toString(),\n          onChange: handleCellChange(r, c)\n        }, r * grid.length + c, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SolveBtn, {\n        onClick: solve,\n        children: \"Solve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Solver;","map":{"version":3,"sources":["/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js"],"names":["React","useState","SolverContainer","Title","Grid","Cell","SolveBtn","Solver","Component","constructor","props","solve","fetch","method","headers","body","JSON","stringify","grid","then","response","ok","json","data","setGrid","handleCellChange","r","c","e","document","getElementById","length","value","newgrid","console","log","target","parseInt","state","bind","render","map","row","num","toString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements'\n\n// const Solver = () => {\nclass Solver extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {grid: [\n            [0, 0, 0, 0, 0, 0, 6, 8, 0],\n            [0, 0, 0, 0, 7, 3, 0, 0, 9],\n            [3, 0, 9, 0, 0, 0, 0, 4, 5],\n            [4, 9, 0, 0, 0, 0, 0, 0, 0],\n            [8, 0, 3, 0, 5, 0, 9, 0, 2],\n            [0, 0, 0, 0, 0, 0, 0, 3, 6],\n            [9, 6, 0, 0, 0, 0, 3, 0, 8],\n            [7, 0, 0, 6, 8, 0, 0, 0, 0],\n            [0, 2, 8, 0, 0, 0, 0, 0, 0]\n        ]};\n        this.handleCellChange = this.handleCellChange.bind(this);\n      }\n\n    // const [grid, setGrid] = useState([\n    //     [0, 0, 0, 0, 0, 0, 6, 8, 0],\n    //     [0, 0, 0, 0, 7, 3, 0, 0, 9],\n    //     [3, 0, 9, 0, 0, 0, 0, 4, 5],\n    //     [4, 9, 0, 0, 0, 0, 0, 0, 0],\n    //     [8, 0, 3, 0, 5, 0, 9, 0, 2],\n    //     [0, 0, 0, 0, 0, 0, 0, 3, 6],\n    //     [9, 6, 0, 0, 0, 0, 3, 0, 8],\n    //     [7, 0, 0, 6, 8, 0, 0, 0, 0],\n    //     [0, 2, 8, 0, 0, 0, 0, 0, 0]\n    // ])\n\n    // useEffect(()=> {\n    //     fetch(`http://127.0.0.1:5000/getGrid`)\n    //     .then(response => response.json())\n    //     .then(data => setGrid(data))\n    // }, [])\n    \n    solve = () => {\n        fetch(`http://127.0.0.1:5000/solve`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({grid: grid})\n        }).then(response => {\n            if(response.ok){\n                return response.json()\n            }\n        }).then(data => setGrid(data))\n    }\n\n    handleCellChange = (r,c) => (e) => {\n        // console.log(e.target.value)\n        document.getElementById(`${(r*grid.length)+c}`).value = \"\"\n        var newgrid = grid;\n        console.log(newgrid)\n        if(e.target.value)\n            newgrid[r][c] = parseInt(e.target.value)\n        else\n            newgrid[r][c] = 0\n        setGrid(newgrid);\n        console.log(grid)\n        // forceUpdate\n    }\n\n    render() {\n        return (\n            <SolverContainer>\n                <Title>Sudoku Solver</Title>\n                <Grid>\n                    {grid.map((row, r) => (\n                        row.map((num, c) => (\n                            <Cell id={`${(r*grid.length)+c}`} type=\"text\" value={grid[r][c].toString()} key={(r*grid.length)+c} onChange={handleCellChange(r,c)}/>\n                        ))\n                    ))}\n                </Grid>\n                <SolveBtn onClick={solve}>Solve</SolveBtn>\n            </SolverContainer>\n        )\n    }\n}\n\nexport default Solver\n"]},"metadata":{},"sourceType":"module"}