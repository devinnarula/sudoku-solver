{"ast":null,"code":"var _jsxFileName = \"/Users/devinnarula/Documents/GitHub/sudoku-solver/src/pages/Solver/solver.js\";\nimport React from 'react';\nimport { SolverContainer, SolverInfo, Title, Grid, Cell, SolverMiddle, SolverButtons, SolveBtn, TimeLabel, Time, TimeContainer } from './SolverElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Solver extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.solve = () => {\n      fetch(`https://sudoku-solver-python-api.herokuapp.com/solve`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          grid: this.state.grid\n        })\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(data => {\n        this.setState({\n          grid: data.grid,\n          time: data.time\n        });\n\n        if (!data.valid) {\n          alert(\"Invalid Sudoku Board (Cannot be solved because board is illegal)\");\n        }\n      });\n    };\n\n    this.handleCellChange = (r, c) => e => {\n      var newgrid = this.state.grid;\n      if (e.target.value) newgrid[r][c] = parseInt(e.target.value);else newgrid[r][c] = 0;\n      this.setState({\n        grid: newgrid\n      });\n    };\n\n    this.handleClear = () => {\n      this.setState({\n        grid: [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]],\n        time: 0\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        grid: [[0, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 0, 7, 3, 0, 0, 9], [3, 0, 9, 0, 0, 0, 0, 4, 5], [4, 9, 0, 0, 0, 0, 0, 0, 0], [8, 0, 3, 0, 5, 0, 9, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 6], [9, 6, 0, 0, 0, 0, 3, 0, 8], [7, 0, 0, 6, 8, 0, 0, 0, 0], [0, 2, 8, 0, 0, 0, 0, 0, 0]],\n        time: 0\n      });\n    };\n\n    this.state = {\n      grid: [[0, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 0, 7, 3, 0, 0, 9], [3, 0, 9, 0, 0, 0, 0, 4, 5], [4, 9, 0, 0, 0, 0, 0, 0, 0], [8, 0, 3, 0, 5, 0, 9, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 6], [9, 6, 0, 0, 0, 0, 3, 0, 8], [7, 0, 0, 6, 8, 0, 0, 0, 0], [0, 2, 8, 0, 0, 0, 0, 0, 0]],\n      time: 0\n    };\n    this.handleCellChange = this.handleCellChange.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(SolverContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Sudoku Solver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SolverInfo, {\n        children: \"Welcome to the sudoku solver! Fill out the board however you would like and then press solve to find the solution. If you want to clear the board press clear. And press reset to get a default sudoku game!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SolverMiddle, {\n        children: [/*#__PURE__*/_jsxDEV(SolverButtons, {\n          children: [/*#__PURE__*/_jsxDEV(SolveBtn, {\n            onClick: this.handleClear,\n            children: \"Clear Board\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SolveBtn, {\n            onClick: this.handleReset,\n            children: \"Reset Board\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: this.state.grid.map((row, r) => row.map((num, c) => /*#__PURE__*/_jsxDEV(Cell, {\n            id: `${r * this.state.grid.length + c}`,\n            type: \"number\",\n            min: \"0\",\n            max: \"9\",\n            value: this.state.grid[r][c] !== 0 ? this.state.grid[r][c].toString() : \"\",\n            onChange: this.handleCellChange(r, c),\n            row: r,\n            col: c\n          }, r * this.state.grid.length + c, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SolverButtons, {\n          children: [/*#__PURE__*/_jsxDEV(SolveBtn, {\n            onClick: this.solve,\n            children: \"Solve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(TimeContainer, {\n            children: [/*#__PURE__*/_jsxDEV(TimeLabel, {\n              children: \"Solve Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Time, {\n              children: [this.state.time !== 0 ? this.state.time : \"--\", \" seconds\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Solver;","map":{"version":3,"sources":["/Users/devinnarula/Documents/GitHub/sudoku-solver/src/pages/Solver/solver.js"],"names":["React","SolverContainer","SolverInfo","Title","Grid","Cell","SolverMiddle","SolverButtons","SolveBtn","TimeLabel","Time","TimeContainer","Solver","Component","constructor","props","solve","fetch","method","headers","body","JSON","stringify","grid","state","then","response","ok","json","data","setState","time","valid","alert","handleCellChange","r","c","e","newgrid","target","value","parseInt","handleClear","handleReset","bind","render","map","row","num","length","toString"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { SolverContainer, SolverInfo, Title, Grid, Cell, SolverMiddle, SolverButtons, SolveBtn, TimeLabel, Time, TimeContainer } from './SolverElements'\n\nclass Solver extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [\n            [0, 0, 0, 0, 0, 0, 6, 8, 0],\n            [0, 0, 0, 0, 7, 3, 0, 0, 9],\n            [3, 0, 9, 0, 0, 0, 0, 4, 5],\n            [4, 9, 0, 0, 0, 0, 0, 0, 0],\n            [8, 0, 3, 0, 5, 0, 9, 0, 2],\n            [0, 0, 0, 0, 0, 0, 0, 3, 6],\n            [9, 6, 0, 0, 0, 0, 3, 0, 8],\n            [7, 0, 0, 6, 8, 0, 0, 0, 0],\n            [0, 2, 8, 0, 0, 0, 0, 0, 0]\n            ],\n            time: 0\n        };\n        this.handleCellChange = this.handleCellChange.bind(this);\n      }\n    \n    solve = () => {\n        fetch(`https://sudoku-solver-python-api.herokuapp.com/solve`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({grid: this.state.grid})\n        }).then(response => {\n            if(response.ok){\n                return response.json()\n            }\n        }).then(data => {\n            this.setState({grid: data.grid, time: data.time})\n            if (!data.valid) {\n                alert(\"Invalid Sudoku Board (Cannot be solved because board is illegal)\")\n            }\n        })\n    }\n\n    handleCellChange = (r,c) => (e) => {\n        var newgrid = this.state.grid;\n        if(e.target.value)\n            newgrid[r][c] = parseInt(e.target.value)\n        else\n            newgrid[r][c] = 0\n        this.setState({grid: newgrid})\n    }\n\n    handleClear = () => {\n        this.setState({\n            grid: [\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0]\n            ],\n            time: 0\n        })\n    }\n\n    handleReset = () => {\n        this.setState({\n            grid: [\n            [0, 0, 0, 0, 0, 0, 6, 8, 0],\n            [0, 0, 0, 0, 7, 3, 0, 0, 9],\n            [3, 0, 9, 0, 0, 0, 0, 4, 5],\n            [4, 9, 0, 0, 0, 0, 0, 0, 0],\n            [8, 0, 3, 0, 5, 0, 9, 0, 2],\n            [0, 0, 0, 0, 0, 0, 0, 3, 6],\n            [9, 6, 0, 0, 0, 0, 3, 0, 8],\n            [7, 0, 0, 6, 8, 0, 0, 0, 0],\n            [0, 2, 8, 0, 0, 0, 0, 0, 0]\n            ],\n            time: 0\n        })\n    }\n\n    render() {\n        return (\n            <SolverContainer>\n                <Title>Sudoku Solver</Title>\n                <SolverInfo>\n                    Welcome to the sudoku solver! Fill out the board however you would like and then press solve to find the solution. If you want to clear the board press clear. And press reset to get a default sudoku game!\n                </SolverInfo>\n                <SolverMiddle>\n                    <SolverButtons>\n                        <SolveBtn onClick={this.handleClear}>Clear Board</SolveBtn>\n                        <SolveBtn onClick={this.handleReset}>Reset Board</SolveBtn>\n                    </SolverButtons>\n                    <Grid>\n                        {this.state.grid.map((row, r) => (\n                            row.map((num, c) => (\n                                <Cell id={`${(r*this.state.grid.length)+c}`} type=\"number\" min='0' max='9' value={this.state.grid[r][c]!==0 ? this.state.grid[r][c].toString() : \"\"} key={(r*this.state.grid.length)+c} onChange={this.handleCellChange(r,c)} row={r} col={c}/>\n                            ))\n                        ))}\n                    </Grid>\n                    <SolverButtons>\n                    <SolveBtn onClick={this.solve}>Solve</SolveBtn>\n                    <TimeContainer>\n                        <TimeLabel>Solve Time:</TimeLabel>\n                        <Time>{this.state.time !== 0 ? this.state.time : \"--\"} seconds</Time>\n                    </TimeContainer>\n                    </SolverButtons>\n                </SolverMiddle>\n            </SolverContainer>\n        )\n    }\n}\n\nexport default Solver\n"]},"metadata":{},"sourceType":"module"}