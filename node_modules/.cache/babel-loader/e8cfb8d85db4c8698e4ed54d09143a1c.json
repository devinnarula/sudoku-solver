{"ast":null,"code":"var _jsxFileName = \"/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Solver = () => {\n  _s();\n\n  const [grid, setGrid] = useState([[0, 0, 0, 0, 0, 0, 6, 8, 0], [0, 0, 0, 0, 7, 3, 0, 0, 9], [3, 0, 9, 0, 0, 0, 0, 4, 5], [4, 9, 0, 0, 0, 0, 0, 0, 0], [8, 0, 3, 0, 5, 0, 9, 0, 2], [0, 0, 0, 0, 0, 0, 0, 3, 6], [9, 6, 0, 0, 0, 0, 3, 0, 8], [7, 0, 0, 6, 8, 0, 0, 0, 0], [0, 2, 8, 0, 0, 0, 0, 0, 0]]); // useEffect(()=> {\n  //     fetch(`http://127.0.0.1:5000/getGrid`)\n  //     .then(response => response.json())\n  //     .then(data => setGrid(data))\n  // }, [])\n\n  const solve = () => {\n    fetch(`http://127.0.0.1:5000/solve`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        grid: grid\n      })\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    }).then(data => setGrid(data));\n  };\n\n  function changeCell(r, c, e) {\n    grid[r][c] = e.target.value;\n  }\n\n  return /*#__PURE__*/_jsxDEV(SolverContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Sudoku Solver\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: grid.map((row, r) => row.map((num, c) => /*#__PURE__*/_jsxDEV(Cell, {\n        value: num,\n        onChange: (r, c) => changeCell\n      }, r * grid.length + c, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SolveBtn, {\n      onClick: solve,\n      children: \"Solve\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Solver, \"FqfdLe2Ngt/lVHa8gcIhVZ6SyIE=\");\n\n_c = Solver;\nexport default Solver;\n\nvar _c;\n\n$RefreshReg$(_c, \"Solver\");","map":{"version":3,"sources":["/Users/devinnarula/Documents/GitHub/sudoku-solver/sudoku-solver/src/pages/Solver/solver.js"],"names":["React","useState","SolverContainer","Title","Grid","Cell","SolveBtn","Solver","grid","setGrid","solve","fetch","method","headers","body","JSON","stringify","then","response","ok","json","data","changeCell","r","c","e","target","value","map","row","num","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { SolverContainer, Title, Grid, Cell, SolveBtn } from './SolverElements'\n\nconst Solver = () => {\n    const [grid, setGrid] = useState([\n        [0, 0, 0, 0, 0, 0, 6, 8, 0],\n        [0, 0, 0, 0, 7, 3, 0, 0, 9],\n        [3, 0, 9, 0, 0, 0, 0, 4, 5],\n        [4, 9, 0, 0, 0, 0, 0, 0, 0],\n        [8, 0, 3, 0, 5, 0, 9, 0, 2],\n        [0, 0, 0, 0, 0, 0, 0, 3, 6],\n        [9, 6, 0, 0, 0, 0, 3, 0, 8],\n        [7, 0, 0, 6, 8, 0, 0, 0, 0],\n        [0, 2, 8, 0, 0, 0, 0, 0, 0]\n    ])\n\n    // useEffect(()=> {\n    //     fetch(`http://127.0.0.1:5000/getGrid`)\n    //     .then(response => response.json())\n    //     .then(data => setGrid(data))\n    // }, [])\n    \n    const solve = () => {\n        fetch(`http://127.0.0.1:5000/solve`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({grid: grid})\n        }).then(response => {\n            if(response.ok){\n                return response.json()\n            }\n        }).then(data => setGrid(data))\n    }\n\n    function changeCell(r,c,e) {\n        grid[r][c] = e.target.value;\n    }\n\n    return (\n        <SolverContainer>\n            <Title>Sudoku Solver</Title>\n            <Grid>\n                {grid.map((row, r) => (\n                    row.map((num, c) => (\n                        <Cell key={(r*grid.length)+c} value={num} onChange={(r,c) => changeCell}/>\n                    ))\n                ))}\n            </Grid>\n            <SolveBtn onClick={solve}>Solve</SolveBtn>\n        </SolverContainer>\n    )\n}\n\nexport default Solver\n"]},"metadata":{},"sourceType":"module"}